module machine (
    input clk,  // clock
    input rst,  // reset
    input run,
    output debug_address[16],
    output debug_data[16],
    output debug_imm7[7],
    output debug_imm10[10],
    output debug_opcode[7],
    output debug_exception
  ) {

  .clk(clk), .rst(rst) {
    fsm state = {NORMAL, EXCEPTION};
    dff pc[16];
    dff gp_regs[8][16];
    firmware rom;
  }                                   
  
  sig inst[16];
  
  .inst(inst) {
    decoder inst_dec;
  } 
  
  always {
    rom.address = pc.q;
    debug_address = pc.q;
    debug_data = rom.data;
    debug_imm7 = inst_dec.imm7;
    debug_imm10 = inst_dec.imm10;
    debug_opcode = inst_dec.op;
    debug_exception = 0;
    
    rom.address = pc.q;
    inst = rom.data;
    

    case (state.q) {
      state.NORMAL:
        if (run) {
          pc.d = pc.q + 1;
                    
          case (inst_dec.op) {
            default:
              pc.d = pc.q;
              debug_exception = 1;
              state.d = state.EXCEPTION;
          }
        }
      
      state.EXCEPTION:
        debug_exception = 1;
    }
  }
}
