module decoder (
    input inst[16],
    output op[3],
    output regA[3],
    output regB[3],
    output regC[3],
    output imm7[7],
    output imm10[10]
  ) {
  
  sig type_rrr;
  sig type_rri;
  sig type_ri;

  always {
    
    // Set the instruction type based on the opcode
    type_rrr = 0;
    type_rri = 0;
    type_ri = 0;
    op = inst[15:13];
    case (inst[15:13]) {
      Opcode.ADD:  type_rrr = 1;
      Opcode.ADDI: type_rri = 1;
      Opcode.NAND: type_rrr = 1;
      Opcode.LUI:  type_ri = 1;
      Opcode.SW:   type_rri = 1;
      Opcode.LW:   type_rri = 1;
      Opcode.BEQ:  type_rri = 1;
      Opcode.JALR: type_rri = 1;
    }
    
    // Set the register selection and immediate values based on infrastructure types
    regA = 0;
    regB = 0;
    regC = 0;
    imm7 = 0;
    imm10 = 0;
    
    // RRR instructions have three registers
    if (type_rrr) {
      regA = inst[12:10];
      regB = inst[9:7];
      regC = inst[2:0];
    }
    
    // RRI instructions have two registers and a 7-bit signed immediate value
    if (type_rri) {
      regA = inst[12:10];
      regB = inst[9:7];
      imm7 = inst[6:0];
    }
    
    // RI instructions have one register and a 10-bit immediate value
    if (type_ri) {
      regA = inst[12:10];
      imm10 = inst[9:0];
    }
  }
}
