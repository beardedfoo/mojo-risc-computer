module ioshield_debugger (
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    input debug_imm[32],
    input debug_data[32],
    input debug_address[32],
    input debug_opcode[7],
    input exception,
    output io_seg[8],
    output io_sel[4],
    output io_led[3][8],
    output led[8],
    output run
  ) {
  .clk(clk)  {
    // Condition the step button input and watch for rising edges
    .in(io_button[1]) {
      button_conditioner step_btn_cond;
    }
    .in(step_btn_cond.out) {
      edge_detector step_btn_rising(#RISE(1), #FALL(0));
    }
    
    .in(io_button[0]) {
      button_conditioner mode_btn_cond;
    }
    .in(mode_btn_cond.out) {
      edge_detector mode_btn_rising(#RISE(1), #FALL(0));
    }
    
    // Condition the run switch input
    .in(io_dip[2][7]) {
      button_conditioner run_switch_cond;
    }
    
    .rst(rst) {
      fsm state = {INIT, PC, INST, IMM};
      ioshield_seven_segment_controller seg;
    }
  }
  
  always {
    run = run_switch_cond.out | step_btn_rising.out;
    
    // Show the debug address on the 7 segment display    
    io_seg = seg.io_seg;
    io_sel = seg.io_sel;
    seg.data = 4x{8h0};
    seg.display_mode = 4b0000;
    seg.ascii_data = 4x{{8h0}};
    seg.blink = 0;
    led = 8h0;
    io_led = 3x{{8h0}};
    
    // The "Up" button changes display modes
    if (mode_btn_rising.out) {
      case (state.q) {
        state.PC: state.d = state.INST;
        state.INST: state.d = state.IMM;
        state.IMM: state.d = state.PC;
      }
    }
    
    // When the PC is stepped, switch to PC display mode
    if (step_btn_rising.out) {
      state.d = state.PC;
    }
    
    case (state.q) {
      state.MENU:
        seg.ascii_data[3] = ".";
        seg.ascii_data[2] = ".;
      
      state.PC:
        // Show the debug data bus on the leds
        // (24 least significant bits on io shield, 8 most significant on base board)    
        seg.data = debug_address[15:0];
        io_led[0] = debug_data[7:0];
        io_led[1] = debug_data[15:8];
        io_led[2] = debug_data[23:16];
        led = debug_data[31:24];
        
      state.INST:
        seg.data = debug_opcode;
        seg.ascii_data[3] = "i";
        seg.ascii_data[2] = "n";
        seg.display_mode = 4b1100;
      
      state.IMM:
        seg.data = debug_imm[15:0];
        io_led[0] = debug_imm[7:0];
        io_led[1] = debug_imm[15:8];
        io_led[2] = debug_imm[23:16];
        led = debug_imm[31:24];
    }
    
    if (exception) {
      seg.blink = 1;
    }
  }
}
